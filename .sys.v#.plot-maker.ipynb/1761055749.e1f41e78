{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "6063b968",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/eos/home-i01/a/agianatt/SWAN_projects/my_efficiency-vs-t\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "os.chdir('/eos/home-i01/a/agianatt/SWAN_projects/my_efficiency-vs-t')\n",
    "print(os.getcwd())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c840e001",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ROOT\n",
    "import os\n",
    "import nbimporter_local_backup\n",
    "import utils\n",
    "import ctypes\n",
    "import pandas as pd\n",
    "from numpy import arange\n",
    "from pprint import pprint\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4b5c9324",
   "metadata": {},
   "outputs": [],
   "source": [
    "outputFolder = 'plots/'\n",
    "grafana_table_csv = 'Tracking-eff-2024-data.csv'\n",
    "#runs = utils.get_completed_runs_longer_than(grafana_table_csv,50)\n",
    "rad_eff_file_pattern = '/eos/cms/store/group/dpg_ctpps/comm_ctpps/pps-automation/dev/pps-test-re-tracking-efficiency/2025_test_first_bunch/{run}/outputTrackingEfficiency_run{run}.root'\n",
    "track_dist_file_pattern = '/eos/cms/store/group/dpg_ctpps/comm_ctpps/pps-automation/dev/pps-test-re-tracking-efficiency/2025_test_first_bunch/{run}/outputEfficiencyAnalysisDQMHarvester_run{run}.root'\n",
    "\n",
    "track_dist_file_first = track_dist_file_pattern.format(run=379729)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9424ae5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fitPeak(peak_slice,fit_minX,fit_maxX):\n",
    "    bin_width = peak_slice.GetXaxis().GetBinWidth(1)\n",
    "    max_bin_fluctuation = 5 # 5*binwidth\n",
    "    min_ndf_for_fit = 6\n",
    "    max_vs_x = ROOT.TF1('max_vs_x','[0]+[1]/x+[2]/(x*x)',fit_maxX,fit_maxX)\n",
    "    chi2_scan = {}\n",
    "    ndf_scan = {}\n",
    "    for i in range(max_bin_fluctuation+1):\n",
    "        fit_minX_sl0 = fit_minX + bin_width*i\n",
    "        \n",
    "        for j in range(max_bin_fluctuation+1):\n",
    "            fit_maxX_sl0 = fit_maxX - bin_width*j\n",
    "            max_vs_x.SetRange(fit_minX_sl0,fit_maxX_sl0)\n",
    "            max_vs_x.SetParameters(0,0)\n",
    "            fitResults = peak_slice.Fit(max_vs_x,'SQNR')\n",
    "            try:\n",
    "                if fitResults.Ndf() < min_ndf_for_fit:\n",
    "                    continue\n",
    "            except ReferenceError as e:\n",
    "                continue\n",
    "            chi2_scan[(i,j)] = fitResults.Chi2()\n",
    "            ndf_scan[(i,j)] = fitResults.Ndf()\n",
    "            \n",
    "        if not chi2_scan:\n",
    "            print(f\"[WARNING] Nessun fit riuscito nel range ({fit_minX}, {fit_maxX}).\")\n",
    "            print(f\"[DEBUG] peak_slice entries = {peak_slice.GetEntries()}\")\n",
    "            return None  # evita crash\n",
    "    \n",
    "    best_fluctuation = min(chi2_scan,key=chi2_scan.get)\n",
    "    print('Best X fit range: ({minx:.2f},{maxx:.2f})'.format(\n",
    "        minx=fit_minX + bin_width*best_fluctuation[0],\n",
    "        maxx=fit_maxX - bin_width*best_fluctuation[1]\n",
    "    ))\n",
    "    print('Chi2: '+str(chi2_scan[best_fluctuation]))\n",
    "    print('Ndf: '+str(ndf_scan[best_fluctuation]))\n",
    "    \n",
    "    \n",
    "    # Do the fit after finding the best option\n",
    "    fit_minX_sl0 = fit_minX + bin_width*best_fluctuation[0]\n",
    "    fit_maxX_sl0 = fit_maxX - bin_width*best_fluctuation[1]\n",
    "    max_vs_x.SetRange(fit_minX_sl0,fit_maxX_sl0)\n",
    "    max_vs_x.SetParameters(0,0)\n",
    "    _ = peak_slice.Fit(max_vs_x,'SQNR')\n",
    "    return max_vs_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e1cfd56b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fitDistribution(hist,draw=None):\n",
    "    \"\"\"Fit the slices of the track distribution\"\"\"\n",
    "    fit_minX = 3\n",
    "    fit_maxX = 5\n",
    "    fit_minBin = hist.GetXaxis().FindBin(fit_minX)\n",
    "    fit_maxBin = hist.GetXaxis().FindBin(fit_maxX)\n",
    "    \n",
    "    ymax_bin = -1\n",
    "    py = hist.ProjectionY()\n",
    "    ymax_bin = py.GetMaximumBin()\n",
    "    ymax = py.GetXaxis().GetBinCenter(ymax_bin)\n",
    "    fit_yrange = py.GetRMS() / 3\n",
    "    \n",
    "    gaus = ROOT.TF1(\"gaus\", \"gaus\", ymax-fit_yrange, ymax+fit_yrange);\n",
    "    slices = ROOT.TObjArray()\n",
    "    hist.FitSlicesY(gaus, fit_minBin, fit_maxBin, 0, \"QNRG2\",slices)\n",
    "\n",
    "    # Now fit each parameter\n",
    "    max_vs_x = fitPeak(slices[0],fit_minX,fit_maxX)\n",
    "    if max_vs_x is None:\n",
    "        print(\"[ERROR] fitPeak() non ha trovato un fit valido. Controlla l’istogramma.\")\n",
    "    \n",
    "    beam_axis = ROOT.TF1('beam_axis','pol1',fit_minX,fit_maxX)\n",
    "    _ = slices[1].Fit(beam_axis,'SQNR')\n",
    "    sigma_vs_x = ROOT.TF1('sigma_vs_x','pol1',fit_minX,fit_maxX)\n",
    "    _ = slices[2].Fit(sigma_vs_x,'SQNR')\n",
    "    canvas=ROOT.TCanvas()\n",
    "    \n",
    "    if draw is not None:\n",
    "        slices[draw].DrawCopy()\n",
    "        if draw == 0:\n",
    "            max_vs_x.Draw('same')\n",
    "        elif draw == 1:\n",
    "            beam_axis.Draw('same')\n",
    "        elif draw == 2:\n",
    "            sigma_vs_x.Draw('same')\n",
    "    \n",
    "    \n",
    "    slices[1].SetDirectory(0)\n",
    "    return slices[0],slices[1],max_vs_x,beam_axis,sigma_vs_x,canvas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "651fcc38",
   "metadata": {},
   "outputs": [],
   "source": [
    "def findXRange(peak_hist,peak_fit,target_fraction):\n",
    "    min_x = ctypes.c_double()\n",
    "    max_x = ctypes.c_double()\n",
    "    peak_fit.GetRange(min_x,max_x)\n",
    "    min_bin_x = peak_hist.GetXaxis().FindBin(min_x)\n",
    "    max_bin_x = peak_hist.GetXaxis().FindBin(max_x)\n",
    "\n",
    "\n",
    "    int_full = peak_hist.Integral(min_bin_x,max_bin_x)\n",
    "    int_scan = {}\n",
    "    for i in range(max_bin_x-min_bin_x):\n",
    "        int_range = peak_hist.Integral(min_bin_x,max_bin_x-i)\n",
    "        int_scan[i] = abs((int_range/int_full) - target_fraction)\n",
    "\n",
    "    best_max_i = min(int_scan,key=it_scan.get)\n",
    "    best_max_bin = max_bin_x-best_max_i\n",
    "    best_max = peak_hist.GetXaxis().GetBinUpEdge(best_max_bin)\n",
    "    print('Best integration range: ({minx:.2f},{maxx:.2f})'.format(minx=min_x.value,maxx=best_max))\n",
    "    print('Fraction: {int_range:.3f} (target = {target:.2f})'.format(\n",
    "        int_range = peak_hist.Integral(min_bin_x,best_max_bin)/int_full,\n",
    "        target=target_fraction\n",
    "    ))\n",
    "    return min_x.value,best_max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6b9ea4b3",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[WARNING] Nessun fit riuscito nel range (3, 5).\n",
      "[DEBUG] peak_slice entries = 7.0\n",
      "[ERROR] fitPeak() non ha trovato un fit valido. Controlla l’istogramma.\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'NoneType' object has no attribute 'Draw'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[28], line 8\u001b[0m\n\u001b[1;32m      6\u001b[0m track_hist \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mgetPlot(track_dist_file_first,sector,station,track_distribution_pattern)\n\u001b[1;32m      7\u001b[0m st_m \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m220\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m station \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m210\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m----> 8\u001b[0m peak_points,beam_axis_points,max_vs_x,beam_axis,sigma_vs_x,canvas \u001b[38;5;241m=\u001b[39m \u001b[43mfitDistribution\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrack_hist\u001b[49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      9\u001b[0m x_min_area,x_max_area \u001b[38;5;241m=\u001b[39m findXRange(peak_points,max_vs_x,\u001b[38;5;241m0.7\u001b[39m)\n\u001b[1;32m     11\u001b[0m p_0_up \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m     12\u001b[0m     x_min_area,\n\u001b[1;32m     13\u001b[0m     beam_axis\u001b[38;5;241m.\u001b[39mEval(x_min_area)\u001b[38;5;241m+\u001b[39mn_sigma\u001b[38;5;241m*\u001b[39msigma_vs_x\u001b[38;5;241m.\u001b[39mEval(x_min_area)\n\u001b[1;32m     14\u001b[0m )\n",
      "Cell \u001b[0;32mIn[26], line 32\u001b[0m, in \u001b[0;36mfitDistribution\u001b[0;34m(hist, draw)\u001b[0m\n\u001b[1;32m     30\u001b[0m slices[draw]\u001b[38;5;241m.\u001b[39mDrawCopy()\n\u001b[1;32m     31\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m draw \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m---> 32\u001b[0m     \u001b[43mmax_vs_x\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mDraw\u001b[49m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msame\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     33\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m draw \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m     34\u001b[0m     beam_axis\u001b[38;5;241m.\u001b[39mDraw(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msame\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'Draw'"
     ]
    }
   ],
   "source": [
    "sector = '45'\n",
    "station = '2'\n",
    "n_sigma = 0.5\n",
    "\n",
    "track_distribution_pattern = 'DQMData/Run 999999/Arm{arm}/Run summary/st{station}/rp3/h2TrackHitDistribution_arm{arm}_st{station}_rp3'\n",
    "track_hist = utils.getPlot(track_dist_file_first,sector,station,track_distribution_pattern)\n",
    "st_m = '220' if station == '2' else '210'\n",
    "peak_points,beam_axis_points,max_vs_x,beam_axis,sigma_vs_x,canvas = fitDistribution(track_hist,0)\n",
    "x_min_area,x_max_area = findXRange(peak_points,max_vs_x,0.7)\n",
    "\n",
    "p_0_up = (\n",
    "    x_min_area,\n",
    "    beam_axis.Eval(x_min_area)+n_sigma*sigma_vs_x.Eval(x_min_area)\n",
    ")\n",
    "p_1_up = (\n",
    "    x_max_area,\n",
    "    beam_axis.Eval(x_max_area)+n_sigma*sigma_vs_x.Eval(x_max_area)\n",
    ")\n",
    "p_0_down = (\n",
    "    x_min_area,\n",
    "    beam_axis.Eval(x_min_area)-n_sigma*sigma_vs_x.Eval(x_min_area)\n",
    ")\n",
    "p_1_down = (\n",
    "    x_max_area,\n",
    "    beam_axis.Eval(x_max_area)-n_sigma*sigma_vs_x.Eval(x_max_area)\n",
    ")\n",
    "\n",
    "line_up = ROOT.TF1('line_up','pol1',x_min_area,x_max_area)\n",
    "m_up = (p_1_up[1]-p_0_up[1])/(p_1_up[0]-p_0_up[0])\n",
    "line_up.SetParameters(\n",
    "    p_0_up[1]-p_0_up[0]*m_up,\n",
    "    m_up\n",
    ")\n",
    "\n",
    "line_down = ROOT.TF1('line_down','pol2',x_min_area,x_max_area)\n",
    "m_down = (p_1_down[1]-p_0_down[1])/(p_1_down[0]-p_0_down[0])\n",
    "line_down.SetParameters(\n",
    "    p_0_down[1]-p_0_down[0]*m_down,\n",
    "    m_down\n",
    ")\n",
    "\n",
    "line_left = ROOT.TLine(x_min_area,line_down.Eval(x_min_area),x_min_area,line_up.Eval(x_min_area))\n",
    "line_left.SetLineColor(ROOT.kRed)\n",
    "line_right = ROOT.TLine(x_max_area,line_down.Eval(x_max_area),x_max_area,line_up.Eval(x_max_area))\n",
    "line_right.SetLineColor(ROOT.kRed)\n",
    "\n",
    "right_margin = 0.15\n",
    "enlarge_factor = 1.5\n",
    "c_hist_area = ROOT.TCanvas('c','c',round(700*enlarge_factor),round(500*enlarge_factor))\n",
    "c_hist_area.SetRightMargin(right_margin)\n",
    "ROOT.gStyle.SetPalette(ROOT.kViridis)\n",
    "ROOT.gStyle.SetOptStat(0)\n",
    "ROOT.gStyle.SetOptTitle(0)\n",
    "c_hist_area.SetLogz()\n",
    "\n",
    "track_hist.GetXaxis().SetRangeUser(0,10)\n",
    "track_hist.GetYaxis().SetRangeUser(-5,5)\n",
    "track_hist.GetXaxis().SetTitleSize(0.05)\n",
    "track_hist.GetXaxis().SetLabelSize(0.05)\n",
    "track_hist.GetXaxis().SetTitleOffset(0.9)\n",
    "track_hist.GetYaxis().SetTitleSize(0.05)\n",
    "track_hist.GetYaxis().SetLabelSize(0.05)\n",
    "track_hist.GetYaxis().SetTitleOffset(1)    \n",
    "bin_area = track_hist.GetXaxis().GetBinWidth(1)*track_hist.GetYaxis().GetBinWidth(1)\n",
    "track_hist.GetZaxis().SetTitle('Tracks/{bin_area:.3f} mm^{{2}}'.format(bin_area=bin_area))\n",
    "track_hist.GetZaxis().SetTitleSize(0.04)\n",
    "track_hist.GetZaxis().SetTitleOffset(1.2)\n",
    "#track_hist.SetTitle('Track hit distribution - {sector}-{station}-fr'.format(sector=sector,station=st_m))\n",
    "\n",
    "track_hist.DrawCopy('colz')\n",
    "line_up.Draw('same')\n",
    "line_down.Draw('same')\n",
    "line_left.Draw('same')\n",
    "line_right.Draw('same')\n",
    "\n",
    "plotPubStatus = 'Preliminary'\n",
    "cmsText = '#font[61]{CMS}'\n",
    "cmsText2 = '#scale[0.76]{#font[52]{'+plotPubStatus+'}}'\n",
    "stationTag = '#scale[1]{{#font[42]{{{sector}-{station}-fr}}}}'.format(sector=sector,station=st_m)\n",
    "year_energy_tag = '#scale[0.76]{#font[42]{2024 (13.6 TeV)}}'\n",
    "latex = ROOT.TLatex()\n",
    "latex.SetTextSize(0.05)\n",
    "latex.SetTextAlign(11)\n",
    "latex.DrawLatexNDC(0.13,0.85,cmsText)\n",
    "latex.DrawLatexNDC(0.13,0.80,cmsText2)\n",
    "latex.DrawLatexNDC(0.13,0.13,stationTag)\n",
    "\n",
    "latex.SetTextAlign(31)\n",
    "latex.DrawLatexNDC(1-right_margin-0.01,0.91,year_energy_tag)\n",
    "\n",
    "c_hist_area.DrawClone()\n",
    "#c_hist_area.SaveAs('plots/AvgEfficiencyArea.png')\n",
    "#canvas.DrawClone()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9b02262b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def avgEfficiency(run,min_x,max_x,line_down,line_up,sector,station):\n",
    "    eff_file = rad_eff_file_pattern.format(run=run)\n",
    "    rad_eff_pattern = 'DQMData/Run 999999/Run summary/h2RefinedTrackEfficiency_arm{arm}_st{station}_rp3'\n",
    "    hist = utils.getPlot(eff_file,sector,station,rad_eff_pattern)\n",
    "    n_bins_x = hist.GetXaxis().GetNbins()\n",
    "    n_bins_y = hist.GetYaxis().GetNbins()\n",
    "    eff_sum = 0\n",
    "    eff_counts = 0\n",
    "    for bin_x in range(1,n_bins_x + 1):\n",
    "        for bin_y in range(1,n_bins_y + 1):\n",
    "            x = hist.GetXaxis().GetBinCenter(bin_x)\n",
    "            y = hist.GetYaxis().GetBinCenter(bin_y)\n",
    "            if min_x < x < max_x and line_down.Eval(x) < y < line_up.Eval(x):\n",
    "                bin_eff = hist.GetBinContent(bin_x,bin_y)\n",
    "                eff_sum += bin_eff\n",
    "                eff_counts += 1\n",
    "   # 👇 Stampa per debugging\n",
    "    print(f\"[DEBUG] Run {run} — eff_sum: {eff_sum}, eff_counts: {eff_counts}\")\n",
    "\n",
    "    if eff_counts == 0:\n",
    "        print(f\"[WARNING] Nessun bin trovato per run {run}\")\n",
    "        return 0\n",
    "\n",
    "    avg = eff_sum / eff_counts\n",
    "    print(f\"[DEBUG] Run {run} — Average efficiency = {avg}\")\n",
    "\n",
    "    return avg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cefe2162",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Time', 'run_number', 'fill', 'last_lumi', 'last_era', 'last_globaltag', 'last_endtime', 'last_tracking-efficiency-reference-harvester', 'last_tracking-efficiency-analysis-worker']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Leggi il CSV\n",
    "pps_2024_track_df = pd.read_csv('Tracking-eff-2024-data.csv', comment='#')\n",
    "\n",
    "# Controlla i nomi delle colonne\n",
    "print(pps_2024_track_df.columns.tolist())\n",
    "\n",
    "\n",
    "\n",
    "pps_2024_track_df['integrated_last_lumi'] = pps_2024_track_df['last_lumi'].cumsum()\n",
    "pps_2024_track_df['date'] = pd.to_datetime(pps_2024_track_df['Time'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d172cecb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[DEBUG] Run 379729 — eff_sum: 14.492311363146255, eff_counts: 106\n",
      "[DEBUG] Run 379729 — Average efficiency = 0.1367199185202477\n",
      "[DEBUG] Run 380115 — eff_sum: 94.99413138848671, eff_counts: 106\n",
      "[DEBUG] Run 380115 — Average efficiency = 0.8961710508347802\n",
      "[DEBUG] Run 380385 — eff_sum: 86.46223832674656, eff_counts: 106\n",
      "[DEBUG] Run 380385 — Average efficiency = 0.8156814936485525\n",
      "[DEBUG] Run 380446 — eff_sum: 88.31468970425075, eff_counts: 106\n",
      "[DEBUG] Run 380446 — Average efficiency = 0.8331574500401014\n",
      "[DEBUG] Run 380470 — eff_sum: 86.75079645330281, eff_counts: 106\n",
      "[DEBUG] Run 380470 — Average efficiency = 0.8184037401254982\n",
      "[DEBUG] Run 380531 — eff_sum: 88.16613904969971, eff_counts: 106\n",
      "[DEBUG] Run 380531 — Average efficiency = 0.8317560287707519\n",
      "[DEBUG] Run 381065 — eff_sum: 78.6601686349902, eff_counts: 106\n",
      "[DEBUG] Run 381065 — Average efficiency = 0.7420770625942472\n",
      "[DEBUG] Run 381384 — eff_sum: 56.803767169255515, eff_counts: 106\n",
      "[DEBUG] Run 381384 — Average efficiency = 0.5358845959363728\n"
     ]
    }
   ],
   "source": [
    "# Lista delle run da analizzare\n",
    "selected_runs = [379729,380115,380385,380446,380470,380531,381065,381384]\n",
    "\n",
    "# Calcolo luminosità cumulativa (opzionale)\n",
    "pps_2024_track_df['integrated_last_lumi'] = pps_2024_track_df['last_lumi'].cumsum()\n",
    "\n",
    "intLumis = []\n",
    "avgEfficiencies = []\n",
    "\n",
    "for run in selected_runs:\n",
    "    try:\n",
    "        # Usa run_number e integrated_last_lumi\n",
    "        intLumis.append(float(\n",
    "            pps_2024_track_df[pps_2024_track_df['run_number'] == run].iloc[0]['integrated_last_lumi']\n",
    "        ))\n",
    "    except IndexError:\n",
    "        print(f'Run {run} non trovata nel CSV, skipping...')\n",
    "        continue\n",
    "\n",
    "    avgEfficiencies.append(avgEfficiency(run, x_min_area, x_max_area, line_down, line_up, '45', '2'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "5b92c700",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Data in] sector: 45 — station: 2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Warning in <TCanvas::Constructor>: Deleting canvas with same name: c\n",
      "python ERROR: cannot open image file \"plots/Eff_vs_date_45_2.png\" for writing. Please check permissions.\n",
      "Error in <TASImage::WriteImage>: error writing file plots/Eff_vs_date_45_2.png\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "<div id=\"root_plot_1760980778399\" style=\"width: 1200px; height: 600px; position: relative\">\n",
       "</div>\n",
       "\n",
       "<script>\n",
       "\n",
       "function display_root_plot_1760980778399(Core) {\n",
       "   let obj = Core.parse({\"_typename\":\"TCanvasWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":3,\"fSnapshot\":{\"_typename\":\"TCanvas\",\"fUniqueID\":0,\"fBits\":3342344,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1001,\"fLeftMargin\":0.1,\"fRightMargin\":0.1,\"fBottomMargin\":0.1,\"fTopMargin\":0.1,\"fXfile\":2,\"fYfile\":2,\"fAfile\":1,\"fXstat\":0.99,\"fYstat\":0.99,\"fAstat\":2,\"fFrameFillColor\":0,\"fFrameLineColor\":1,\"fFrameFillStyle\":1001,\"fFrameLineStyle\":1,\"fFrameLineWidth\":1,\"fFrameBorderSize\":1,\"fFrameBorderMode\":0,\"fX1\":1710270000.00189,\"fY1\":-0.137500010244549,\"fX2\":1726793998.99811,\"fY2\":1.23750001024455,\"fXtoAbsPixelk\":-123788.613184335,\"fXtoPixelk\":-123788.613184335,\"fXtoPixel\":7.23795735083925e-5,\"fYtoAbsPixelk\":514.799996590614,\"fYtoPixelk\":514.799996590614,\"fYtoPixel\":-415.999993801117,\"fUtoAbsPixelk\":0,\"fUtoPixelk\":0,\"fUtoPixel\":1196,\"fVtoAbsPixelk\":572,\"fVtoPixelk\":572,\"fVtoPixel\":-572,\"fAbsPixeltoXk\":1710270000.00189,\"fPixeltoXk\":1710270000.00189,\"fPixeltoX\":13816.0526724304,\"fAbsPixeltoYk\":1.23750001024455,\"fPixeltoYk\":-0.137500010244549,\"fPixeltoY\":-0.00240384618966626,\"fXlowNDC\":0,\"fYlowNDC\":0,\"fXUpNDC\":1,\"fYUpNDC\":1,\"fWNDC\":1,\"fHNDC\":1,\"fAbsXlowNDC\":0,\"fAbsYlowNDC\":0,\"fAbsWNDC\":1,\"fAbsHNDC\":1,\"fUxmin\":1711922400,\"fUymin\":0,\"fUxmax\":1725141599,\"fUymax\":1.1,\"fTheta\":30,\"fPhi\":30,\"fAspectRatio\":0,\"fNumber\":0,\"fTickx\":0,\"fTicky\":0,\"fLogx\":0,\"fLogy\":0,\"fLogz\":0,\"fPadPaint\":0,\"fCrosshair\":0,\"fCrosshairPos\":0,\"fBorderSize\":2,\"fBorderMode\":0,\"fModified\":false,\"fGridx\":true,\"fGridy\":true,\"fAbsCoord\":false,\"fEditable\":true,\"fFixedAspectRatio\":false,\"fPrimitives\":{\"_typename\":\"TList\",\"name\":\"TList\",\"arr\":[],\"opt\":[]},\"fExecs\":null,\"fName\":\"c\",\"fTitle\":\"c\",\"fNumPaletteColor\":0,\"fNextPaletteColor\":0,\"fDISPLAY\":\"$DISPLAY\",\"fDoubleBuffer\":0,\"fRetained\":true,\"fXsizeUser\":0,\"fYsizeUser\":0,\"fXsizeReal\":20,\"fYsizeReal\":10,\"fWindowTopX\":0,\"fWindowTopY\":0,\"fWindowWidth\":0,\"fWindowHeight\":0,\"fCw\":1196,\"fCh\":572,\"fCatt\":{\"_typename\":\"TAttCanvas\",\"fXBetween\":2,\"fYBetween\":2,\"fTitleFromTop\":1.2,\"fXdate\":0.2,\"fYdate\":0.3,\"fAdate\":1},\"kMoveOpaque\":true,\"kResizeOpaque\":true,\"fHighLightColor\":2,\"fBatch\":true,\"kShowEventStatus\":false,\"kAutoExec\":true,\"kMenuBar\":true},\"fActive\":false,\"fReadOnly\":true,\"fWithoutPrimitives\":false,\"fHasExecs\":false,\"fPrimitives\":[{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":4,\"fSnapshot\":{\"_typename\":\"TWebPainting\",\"fUniqueID\":0,\"fBits\":0,\"fClassName\":\"\",\"fObjectName\":\"\",\"fOper\":\"0:255,255,255;1:0,0,0;2:255,0,0;3:0,255,0;4:0,0,255;5:255,255,0;6:255,0,255;7:0,255,255;8:89,211,84;9:89,84,216;10:254,254,254;11:192,182,172;12:76,76,76;13:102,102,102;14:127,127,127;15:153,153,153;16:178,178,178;17:204,204,204;18:229,229,229;19:242,242,242;20:204,198,170;21:204,198,170;22:193,191,168;23:186,181,163;24:178,165,150;25:183,163,155;26:173,153,140;27:155,142,130;28:135,102,86;29:175,206,198;30:132,193,163;31:137,168,160;32:130,158,140;33:173,188,198;34:122,142,153;35:117,137,145;36:104,130,150;37:109,122,132;38:124,153,209;39:127,127,155;40:170,165,191;41:211,206,135;42:221,186,135;43:188,158,130;44:198,153,124;45:191,130,119;46:206,94,96;47:170,142,147;48:165,119,122;49:147,104,112;50:211,89,84;51:146,0,255;52:122,0,255;53:98,0,255;54:74,0,255;55:51,0,255;56:27,0,255;57:3,0,255;58:0,20,255;59:0,44,255;60:0,68,255;61:0,91,255;62:0,115,255;63:0,139,255;64:0,163,255;65:0,187,255;66:0,210,255;67:0,234,255;68:0,255,251;69:0,255,227;70:0,255,204;71:0,255,180;72:0,255,156;73:0,255,132;74:0,255,108;75:0,255,85;76:0,255,61;77:0,255,37;78:0,255,13;79:10,255,0;80:34,255,0;81:57,255,0;82:81,255,0;83:105,255,0;84:129,255,0;85:153,255,0;86:176,255,0;87:200,255,0;88:224,255,0;89:248,255,0;90:255,238,0;91:255,214,0;92:255,190,0;93:255,166,0;94:255,142,0;95:255,119,0;96:255,95,0;97:255,71,0;98:255,47,0;99:255,23,0;100:111,45,168;101:165,42,42;102:178,190,181;103:87,144,252;104:248,156,32;105:228,37,54;106:150,74,139;107:156,156,161;108:122,33,221;109:24,69,251;110:255,94,2;111:201,31,22;112:200,73,169;113:173,173,125;114:134,200,221;115:87,141,255;116:101,99,100;117:63,144,218;118:255,169,14;119:189,31,1;120:148,164,162;121:131,45,182;122:169,107,89;123:231,99,0;124:185,172,112;125:113,117,129;126:146,218,221;127:178,178,178;201:91,91,91;202:122,122,122;203:183,183,183;204:214,214,214;205:137,15,15;206:183,20,20;207:234,71,71;208:239,117,117;209:15,137,15;210:20,183,20;211:71,234,71;212:117,239,117;213:15,15,137;214:20,20,183;215:71,71,234;216:117,117,239;217:137,137,15;218:183,183,20;219:234,234,71;220:239,239,117;221:137,15,137;222:183,20,183;223:234,71,234;224:239,117,239;225:15,137,137;226:20,183,183;227:71,234,234;228:117,239,239;390:255,255,204;391:255,255,153;392:204,204,153;393:255,255,102;394:204,204,102;395:153,153,102;396:255,255,51;397:204,204,51;398:153,153,51;399:102,102,51;400:255,255,0;401:204,204,0;402:153,153,0;403:102,102,0;404:51,51,0;406:204,255,204;407:153,255,153;408:153,204,153;409:102,255,102;410:102,204,102;411:102,153,102;412:51,255,51;413:51,204,51;414:51,153,51;415:51,102,51;416:0,255,0;417:0,204,0;418:0,153,0;419:0,102,0;420:0,51,0;422:204,255,255;423:153,255,255;424:153,204,204;425:102,255,255;426:102,204,204;427:102,153,153;428:51,255,255;429:51,204,204;430:51,153,153;431:51,102,102;432:0,255,255;433:0,204,204;434:0,153,153;435:0,102,102;436:0,51,51;590:204,204,255;591:153,153,255;592:153,153,204;593:102,102,255;594:102,102,204;595:102,102,153;596:51,51,255;597:51,51,204;598:51,51,153;599:51,51,102;600:0,0,255;601:0,0,204;602:0,0,153;603:0,0,102;604:0,0,51;606:255,204,255;607:255,153,255;608:204,153,204;609:255,102,255;610:204,102,204;611:153,102,153;612:255,51,255;613:204,51,204;614:153,51,153;615:102,51,102;616:255,0,255;617:204,0,204;618:153,0,153;619:102,0,102;620:51,0,51;622:255,204,204;623:255,153,153;624:204,153,153;625:255,102,102;626:204,102,102;627:153,102,102;628:255,51,51;629:204,51,51;630:153,51,51;631:102,51,51;632:255,0,0;633:204,0,0;634:153,0,0;635:102,0,0;636:51,0,0;791:255,204,153;792:204,153,102;793:153,102,51;794:153,102,0;795:204,153,51;796:255,204,102;797:255,153,0;798:255,204,51;799:204,153,0;800:255,204,0;801:255,153,51;802:204,102,0;803:102,51,0;804:153,51,0;805:204,102,51;806:255,153,102;807:255,102,0;808:255,102,51;809:204,51,0;810:255,51,0;811:153,255,51;812:102,204,0;813:51,102,0;814:51,153,0;815:102,204,51;816:153,255,102;817:102,255,0;818:102,255,51;819:51,204,0;820:51,255,0;821:204,255,153;822:153,204,102;823:102,153,51;824:102,153,0;825:153,204,51;826:204,255,102;827:153,255,0;828:204,255,51;829:153,204,0;830:204,255,0;831:153,255,204;832:102,204,153;833:51,153,102;834:0,153,102;835:51,204,153;836:102,255,204;837:0,255,102;838:51,255,204;839:0,204,153;840:0,255,204;841:51,255,153;842:0,204,102;843:0,102,51;844:0,153,51;845:51,204,102;846:102,255,153;847:0,255,153;848:51,255,102;849:0,204,51;850:0,255,51;851:153,204,255;852:102,153,204;853:51,102,153;854:0,51,153;855:51,102,204;856:102,153,255;857:0,102,255;858:51,102,255;859:0,51,204;860:0,51,255;861:51,153,255;862:0,102,204;863:0,51,102;864:0,102,153;865:51,153,204;866:102,204,255;867:0,153,255;868:51,204,255;869:0,153,204;870:0,204,255;871:204,153,255;872:153,102,204;873:102,51,153;874:102,0,153;875:153,51,204;876:204,102,255;877:153,0,255;878:204,51,255;879:153,0,204;880:204,0,255;881:153,51,255;882:102,0,204;883:51,0,102;884:51,0,153;885:102,51,204;886:153,102,255;887:102,0,255;888:102,51,255;889:51,0,204;890:51,0,255;891:255,51,153;892:204,0,102;893:102,0,51;894:153,0,51;895:204,51,102;896:255,102,153;897:255,0,102;898:255,51,102;899:204,0,51;900:255,0,51;901:255,153,204;902:204,102,153;903:153,51,102;904:153,0,102;905:204,51,153;906:255,102,204;907:255,0,153;908:204,0,153;909:255,51,204;910:255,0,153;920:204,204,204;921:153,153,153;922:102,102,102;923:51,51,51;924:53,42,134;925:51,44,137;926:50,45,140;927:49,47,143;928:48,48,146;929:46,50,148;930:45,51,151;931:44,53,154;932:43,55,157;933:42,56,160;934:40,58,162;935:39,59,165;936:38,61,168;937:37,63,171;938:35,64,174;939:34,66,176;940:33,67,179;941:32,69,182;942:31,71,185;943:29,72,187;944:28,74,190;945:27,75,193;946:26,77,196;947:24,79,199;948:23,80,201;949:22,82,204;950:21,83,207;951:19,85,210;952:18,86,213;953:17,88,215;954:16,90,218;955:15,91,221;956:15,92,221;957:15,94,220;958:15,95,220;959:15,96,220;960:15,97,220;961:15,98,220;962:16,99,219;963:16,100,219;964:16,102,219;965:16,103,219;966:16,104,218;967:16,105,218;968:17,106,218;969:17,107,218;970:17,109,217;971:17,110,217;972:17,111,217;973:17,112,217;974:17,113,216;975:18,114,216;976:18,115,216;977:18,117,216;978:18,118,215;979:18,119,215;980:18,120,215;981:18,121,215;982:19,122,215;983:19,123,214;984:19,125,214;985:19,126,214;986:19,127,214;987:19,128,213;988:19,129,213;989:19,130,213;990:18,131,212;991:18,132,212;992:17,134,211;993:17,135,211;994:16,136,211;995:16,137,210;996:15,138,210;997:15,139,210;998:15,140,209;999:14,141,209;1000:14,142,208;1001:13,143,208;1002:13,145,208;1003:12,146,207;1004:12,147,207;1005:12,148,207;1006:11,149,206;1007:11,150,206;1008:10,151,205;1009:10,152,205;1010:9,153,205;1011:9,154,204;1012:8,155,204;1013:8,157,204;1014:8,158,203;1015:7,159,203;1016:7,160,202;1017:6,161,202;1018:6,162,202;1019:5,163,201;1020:7,164,200;1021:8,164,199;1022:9,165,198;1023:10,166,197;1024:12,166,195;1025:13,167,194;1026:14,167,193;1027:15,168,192;1028:17,169,191;1029:18,169,189;1030:19,170,188;1031:20,170,187;1032:22,171,186;1033:23,172,185;1034:24,172,184;1035:25,173,182;1036:27,173,181;1037:28,174,180;1038:29,175,179;1039:30,175,178;1040:32,176,176;1041:33,176,175;1042:34,177,174;1043:35,178,173;1044:37,178,172;1045:38,179,170;1046:39,180,169;1047:40,180,168;1048:42,181,167;1049:43,181,166;1050:44,182,165;1051:45,183,163;1052:48,183,162;1053:51,183,161;1054:54,183,159;1055:57,184,158;1056:59,184,156;1057:62,184,155;1058:65,184,154;1059:68,185,152;1060:71,185,151;1061:73,185,149;1062:76,185,148;1063:79,186,146;1064:82,186,145;1065:84,186,144;1066:87,186,142;1067:90,187,141;1068:93,187,139;1069:96,187,138;1070:98,187,137;1071:101,188,135;1072:104,188,134;1073:107,188,132;1074:110,188,131;1075:112,189,130;1076:115,189,128;1077:118,189,127;1078:121,189,125;1079:124,190,124;1080:126,190,123;1081:129,190,121;1082:132,190,120;1083:135,191,118;1084:137,190,117;1085:139,190,117;1086:142,190,116;1087:144,190,115;1088:146,190,114;1089:148,190,113;1090:151,190,112;1091:153,190,111;1092:155,189,110;1093:158,189,109;1094:160,189,108;1095:162,189,107;1096:165,189,106;1097:167,189,105;1098:169,189,104;1099:171,188,104;1100:174,188,103;1101:176,188,102;1102:178,188,101;1103:181,188,100;1104:183,188,99;1105:185,188,98;1106:188,188,97;1107:190,187,96;1108:192,187,95;1109:194,187,94;1110:197,187,93;1111:199,187,92;1112:201,187,92;1113:204,187,91;1114:206,186,90;1115:208,186,89;1116:210,187,88;1117:211,187,86;1118:212,188,85;1119:214,188,84;1120:215,188,83;1121:217,189,81;1122:218,189,80;1123:220,190,79;1124:221,190,78;1125:222,191,77;1126:224,191,75;1127:225,191,74;1128:227,192,73;1129:228,192,72;1130:229,193,70;1131:231,193,69;1132:232,194,68;1133:234,194,67;1134:235,194,66;1135:236,195,64;1136:238,195,63;1137:239,196,62;1138:241,196,61;1139:242,197,59;1140:244,197,58;1141:245,197,57;1142:246,198,56;1143:248,198,55;1144:249,199,53;1145:251,199,52;1146:252,200,51;1147:253,200,50;1148:253,202,49;1149:253,203,47;1150:253,205,46;1151:253,206,45;1152:253,208,44;1153:252,209,43;1154:252,211,42;1155:252,213,41;1156:252,214,39;1157:252,216,38;1158:252,217,37;1159:252,219,36;1160:251,220,35;1161:251,222,34;1162:251,224,33;1163:251,225,31;1164:251,227,30;1165:251,228,29;1166:250,230,28;1167:250,231,27;1168:250,233,26;1169:250,235,25;1170:250,236,23;1171:250,238,22;1172:250,239,21;1173:249,241,20;1174:249,242,19;1175:249,244,18;1176:249,246,17;1177:249,247,16;1178:249,249,14;1179:26,9,30;1180:26,9,32;1181:27,9,34;1182:28,10,36;1183:29,10,38;1184:30,11,40;1185:30,11,42;1186:31,12,44;1187:32,12,47;1188:33,13,49;1189:34,13,51;1190:34,14,53;1191:35,14,55;1192:36,15,57;1193:37,15,59;1194:38,16,61;1195:38,16,64;1196:39,17,66;1197:40,17,68;1198:41,18,70;1199:42,18,72;1200:42,19,74;1201:43,19,76;1202:44,20,78;1203:45,20,81;1204:46,21,83;1205:46,21,85;1206:47,22,87;1207:48,22,89;1208:49,23,91;1209:50,23,93;1210:51,24,96;1211:50,24,96;1212:50,25,97;1213:50,26,97;1214:50,27,98;1215:49,28,98;1216:49,29,99;1217:49,30,99;1218:49,31,100;1219:48,32,100;1220:48,33,101;1221:48,34,101;1222:48,35,102;1223:47,36,102;1224:47,37,103;1225:47,38,103;1226:47,39,104;1227:46,40,104;1228:46,41,105;1229:46,42,105;1230:46,43,106;1231:45,44,106;1232:45,45,107;1233:45,46,107;1234:45,47,108;1235:44,48,108;1236:44,49,109;1237:44,50,109;1238:44,51,110;1239:43,52,110;1240:43,53,111;1241:43,54,111;1242:43,55,112;1243:42,56,112;1244:42,57,112;1245:42,58,112;1246:41,59,112;1247:41,60,112;1248:41,61,112;1249:40,62,112;1250:40,63,112;1251:40,64,112;1252:39,65,112;1253:39,66,112;1254:39,67,112;1255:38,68,112;1256:38,69,112;1257:38,70,112;1258:38,71,113;1259:37,72,113;1260:37,73,113;1261:37,74,113;1262:36,75,113;1263:36,76,113;1264:36,77,113;1265:35,78,113;1266:35,79,113;1267:35,80,113;1268:34,81,113;1269:34,82,113;1270:34,83,113;1271:33,84,113;1272:33,85,113;1273:33,86,113;1274:33,87,114;1275:32,87,113;1276:32,88,113;1277:32,89,113;1278:32,90,113;1279:32,91,113;1280:32,92,113;1281:31,93,113;1282:31,94,113;1283:31,95,113;1284:31,96,113;1285:31,97,113;1286:31,98,113;1287:30,99,113;1288:30,100,113;1289:30,101,113;1290:30,102,113;1291:30,103,112;1292:30,104,112;1293:30,105,112;1294:29,106,112;1295:29,107,112;1296:29,108,112;1297:29,109,112;1298:29,110,112;1299:29,111,112;1300:28,112,112;1301:28,113,112;1302:28,114,112;1303:28,115,112;1304:28,116,112;1305:28,117,112;1306:28,118,112;1307:28,119,111;1308:28,120,111;1309:28,121,110;1310:28,122,110;1311:29,123,110;1312:29,124,109;1313:29,125,109;1314:29,126,109;1315:29,127,108;1316:30,128,108;1317:30,129,108;1318:30,130,107;1319:30,131,107;1320:31,132,107;1321:31,133,106;1322:31,134,106;1323:31,135,106;1324:31,136,105;1325:32,137,105;1326:32,138,105;1327:32,139,104;1328:32,140,104;1329:33,141,104;1330:33,142,103;1331:33,143,103;1332:33,144,103;1333:33,145,102;1334:34,146,102;1335:34,147,102;1336:34,148,101;1337:34,149,101;1338:35,150,101;1339:36,150,100;1340:37,151,99;1341:38,152,98;1342:39,153,97;1343:41,154,96;1344:42,155,95;1345:43,156,94;1346:44,157,93;1347:45,158,92;1348:47,159,91;1349:48,160,91;1350:49,161,90;1351:50,162,89;1352:52,163,88;1353:53,164,87;1354:54,165,86;1355:55,165,85;1356:56,166,84;1357:58,167,83;1358:59,168,82;1359:60,169,81;1360:61,170,81;1361:63,171,80;1362:64,172,79;1363:65,173,78;1364:66,174,77;1365:67,175,76;1366:69,176,75;1367:70,177,74;1368:71,178,73;1369:72,179,72;1370:74,180,72;1371:76,180,70;1372:78,181,69;1373:80,181,68;1374:82,182,67;1375:84,183,66;1376:87,183,65;1377:89,184,63;1378:91,185,62;1379:93,185,61;1380:95,186,60;1381:98,186,59;1382:100,187,58;1383:102,188,56;1384:104,188,55;1385:106,189,54;1386:109,190,53;1387:111,190,52;1388:113,191,51;1389:115,191,50;1390:117,192,48;1391:119,193,47;1392:122,193,46;1393:124,194,45;1394:126,195,44;1395:128,195,43;1396:130,196,41;1397:133,196,40;1398:135,197,39;1399:137,198,38;1400:139,198,37;1401:141,199,36;1402:144,200,35;1403:147,200,33;1404:150,201,32;1405:153,202,31;1406:156,202,30;1407:159,203,29;1408:163,204,28;1409:166,204,27;1410:169,205,26;1411:172,206,25;1412:175,206,24;1413:179,207,22;1414:182,208,21;1415:185,208,20;1416:188,209,19;1417:191,210,18;1418:195,211,17;1419:198,211,16;1420:201,212,15;1421:204,213,14;1422:207,213,13;1423:210,214,12;1424:214,215,10;1425:217,215,9;1426:220,216,8;1427:223,217,7;1428:226,217,6;1429:230,218,5;1430:233,219,4;1431:236,219,3;1432:239,220,2;1433:242,221,1\",\"fBuf\":{\"$arr\":\"Float32\",\"len\":255,\"v\":[1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433]}}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":5,\"fSnapshot\":{\"_typename\":\"TStyle\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"Modern\",\"fTitle\":\"Modern Style\",\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":19,\"fFillStyle\":1001,\"fMarkerColor\":1,\"fMarkerStyle\":1,\"fMarkerSize\":1,\"fTextAngle\":0,\"fTextSize\":0.05,\"fTextAlign\":11,\"fTextColor\":1,\"fTextFont\":62,\"fXaxis\":{\"_typename\":\"TAttAxis\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42},\"fYaxis\":{\"_typename\":\"TAttAxis\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":0,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42},\"fZaxis\":{\"_typename\":\"TAttAxis\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42},\"fBarWidth\":1,\"fBarOffset\":0,\"fColorModelPS\":0,\"fDrawBorder\":0,\"fOptLogx\":0,\"fOptLogy\":0,\"fOptLogz\":0,\"fOptDate\":0,\"fOptStat\":0,\"fOptTitle\":0,\"fOptFile\":0,\"fOptFit\":0,\"fShowEventStatus\":0,\"fShowEditor\":0,\"fShowToolBar\":0,\"fNumberContours\":20,\"fAttDate\":{\"_typename\":\"TAttText\",\"fTextAngle\":0,\"fTextSize\":0.025,\"fTextAlign\":11,\"fTextColor\":1,\"fTextFont\":62},\"fDateX\":0.01,\"fDateY\":0.01,\"fEndErrorSize\":2,\"fErrorX\":0.5,\"fFuncColor\":2,\"fFuncStyle\":1,\"fFuncWidth\":2,\"fGridColor\":920,\"fGridStyle\":2,\"fGridWidth\":1,\"fLegendBorderSize\":1,\"fLegendFillColor\":0,\"fLegendFillStyle\":1001,\"fLegendFont\":42,\"fLegendTextSize\":0,\"fHatchesLineWidth\":1,\"fHatchesSpacing\":1,\"fFrameFillColor\":0,\"fFrameLineColor\":1,\"fFrameFillStyle\":1001,\"fFrameLineStyle\":1,\"fFrameLineWidth\":1,\"fFrameBorderSize\":1,\"fFrameBorderMode\":0,\"fHistFillColor\":0,\"fHistLineColor\":602,\"fHistFillStyle\":1001,\"fHistLineStyle\":1,\"fHistLineWidth\":1,\"fHistMinimumZero\":false,\"fHistTopMargin\":0.05,\"fCanvasPreferGL\":false,\"fCanvasColor\":0,\"fCanvasBorderSize\":2,\"fCanvasBorderMode\":0,\"fCanvasDefH\":500,\"fCanvasDefW\":700,\"fCanvasDefX\":10,\"fCanvasDefY\":10,\"fPadColor\":0,\"fPadBorderSize\":2,\"fPadBorderMode\":0,\"fPadBottomMargin\":0.1,\"fPadTopMargin\":0.1,\"fPadLeftMargin\":0.1,\"fPadRightMargin\":0.1,\"fPadGridX\":false,\"fPadGridY\":false,\"fPadTickX\":0,\"fPadTickY\":0,\"fPaperSizeX\":20,\"fPaperSizeY\":26,\"fScreenFactor\":1,\"fStatColor\":0,\"fStatTextColor\":1,\"fStatBorderSize\":1,\"fStatFont\":42,\"fStatFontSize\":0,\"fStatStyle\":1001,\"fStatFormat\":\"6.4g\",\"fStatX\":0.98,\"fStatY\":0.935,\"fStatW\":0.2,\"fStatH\":0.16,\"fStripDecimals\":true,\"fTitleAlign\":23,\"fTitleColor\":0,\"fTitleTextColor\":1,\"fTitleBorderSize\":0,\"fTitleFont\":42,\"fTitleFontSize\":0.06,\"fTitleStyle\":0,\"fTitleX\":0.5,\"fTitleY\":0.995,\"fTitleW\":0,\"fTitleH\":0,\"fLegoInnerR\":0.5,\"fLineStyles\":[\"\",\"  \",\" 12 12\",\" 4 8\",\" 12 16 4 16\",\" 20 12 4 12\",\" 20 12 4 12 4 12 4 12\",\" 20 20\",\" 20 12 4 12 4 12\",\" 80 20\",\" 80 40 4 40\",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \",\"  \"],\"fHeaderPS\":\"\",\"fTitlePS\":\"\",\"fFitFormat\":\"5.4g\",\"fPaintTextFormat\":\"g\",\"fLineScalePS\":3,\"fJoinLinePS\":0,\"fCapLinePS\":0,\"fTimeOffset\":788918400,\"fImageScaling\":1,\"fCandleWhiskerRange\":1,\"fCandleBoxRange\":0.5,\"fCandleScaled\":false,\"fViolinScaled\":true,\"fCandleCircleLineWidth\":1,\"fCandleCrossLineWidth\":1,\"fXAxisExpXOffset\":0,\"fXAxisExpYOffset\":0,\"fYAxisExpXOffset\":0,\"fYAxisExpYOffset\":0,\"fAxisMaxDigits\":5,\"fOrthoCamera\":false}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TFrame\",\"fUniqueID\":0,\"fBits\":8,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1001,\"fX1\":1711922400,\"fY1\":0,\"fX2\":1725141599,\"fY2\":1.1,\"fBorderSize\":1,\"fBorderMode\":0}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"ap\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TGraph\",\"fUniqueID\":0,\"fBits\":1032,\"fName\":\"Graph\",\"fTitle\":\";Date;Peak average efficiency\",\"fLineColor\":600,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1000,\"fMarkerColor\":600,\"fMarkerStyle\":20,\"fMarkerSize\":0.8,\"fNpoints\":8,\"fX\":{\"$arr\":\"Float64\",\"len\":8,\"v\":[1713575614,1714418536,1714932122,1715033775,1715118292,1715255047,1716391430,1717120848]},\"fY\":{\"$arr\":\"Float64\",\"len\":8,\"v\":[0.136719918520248,0.89617105083478,0.815681493648552,0.833157450040101,0.818403740125498,0.831756028770752,0.742077062594247,0.535884595936373]},\"fFunctions\":{\"_typename\":\"TList\",\"name\":\"TList\",\"arr\":[],\"opt\":[]},\"fHistogram\":{\"_typename\":\"TH1F\",\"fUniqueID\":0,\"fBits\":512,\"fName\":\"Graph\",\"fTitle\":\"\",\"fLineColor\":602,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1001,\"fMarkerColor\":1,\"fMarkerStyle\":1,\"fMarkerSize\":1,\"fNcells\":102,\"fXaxis\":{\"_typename\":\"TAxis\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"xaxis\",\"fTitle\":\"Date\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.04,\"fTickLength\":0.03,\"fTitleOffset\":0.85,\"fTitleSize\":0.05,\"fTitleColor\":1,\"fTitleFont\":42,\"fNbins\":100,\"fXmin\":1711922400,\"fXmax\":1725141599,\"fXbins\":[],\"fFirst\":0,\"fLast\":0,\"fBits2\":0,\"fTimeDisplay\":true,\"fTimeFormat\":\"%d-%b%F1970-01-01 00:00:00s0 GMT\",\"fLabels\":null,\"fModLabs\":null},\"fYaxis\":{\"_typename\":\"TAxis\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"yaxis\",\"fTitle\":\"Peak average efficiency\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.045,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.05,\"fTitleColor\":1,\"fTitleFont\":42,\"fNbins\":1,\"fXmin\":0.0607748052887944,\"fXmax\":0.972116164066233,\"fXbins\":[],\"fFirst\":0,\"fLast\":0,\"fBits2\":0,\"fTimeDisplay\":false,\"fTimeFormat\":\"\",\"fLabels\":null,\"fModLabs\":null},\"fZaxis\":{\"_typename\":\"TAxis\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"zaxis\",\"fTitle\":\"\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42,\"fNbins\":1,\"fXmin\":0,\"fXmax\":1,\"fXbins\":[],\"fFirst\":0,\"fLast\":0,\"fBits2\":0,\"fTimeDisplay\":false,\"fTimeFormat\":\"\",\"fLabels\":null,\"fModLabs\":null},\"fBarOffset\":0,\"fBarWidth\":1000,\"fEntries\":0,\"fTsumw\":0,\"fTsumw2\":0,\"fTsumwx\":0,\"fTsumwx2\":0,\"fMaximum\":1.1,\"fMinimum\":0,\"fNormFactor\":0,\"fContour\":[],\"fSumw2\":[],\"fOption\":\"\",\"fFunctions\":{\"_typename\":\"TList\",\"name\":\"TList\",\"arr\":[],\"opt\":[]},\"fBufferSize\":0,\"fBuffer\":[],\"fBinStatErrOpt\":0,\"fStatOverflows\":2,\"fArray\":{\"$arr\":\"Float32\",\"len\":102}},\"fMinimum\":-1111,\"fMaximum\":-1111,\"fOption\":\"\"}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TLatex\",\"fUniqueID\":0,\"fBits\":16393,\"fName\":\"\",\"fTitle\":\"#font[61]{CMS} #scale[0.76]{#font[52]{Preliminary}}\",\"fTextAngle\":0,\"fTextSize\":0.05,\"fTextAlign\":31,\"fTextColor\":1,\"fTextFont\":62,\"fX\":0.88,\"fY\":0.85,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":2,\"fLimitFactorSize\":3,\"fOriginSize\":0.0500000007450581}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TLatex\",\"fUniqueID\":0,\"fBits\":16393,\"fName\":\"\",\"fTitle\":\"#scale[1]{#font[42]{45-220-fr}}\",\"fTextAngle\":0,\"fTextSize\":0.05,\"fTextAlign\":31,\"fTextColor\":1,\"fTextFont\":62,\"fX\":0.88,\"fY\":0.13,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":2,\"fLimitFactorSize\":3,\"fOriginSize\":0.0500000007450581}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TLatex\",\"fUniqueID\":0,\"fBits\":16393,\"fName\":\"\",\"fTitle\":\"#scale[0.76]{#font[42]{2024 (13.6 TeV)}}\",\"fTextAngle\":0,\"fTextSize\":0.05,\"fTextAlign\":31,\"fTextColor\":1,\"fTextFont\":62,\"fX\":0.89,\"fY\":0.91,\"fLineColor\":1,\"fLineStyle\":1,\"fLineWidth\":2,\"fLimitFactorSize\":3,\"fOriginSize\":0.0500000007450581}},{\"_typename\":\"TWebSnapshot\",\"fUniqueID\":0,\"fBits\":0,\"fObjectID\":\"\",\"fOption\":\"sameaxis\",\"fKind\":1,\"fSnapshot\":{\"_typename\":\"TH1F\",\"fUniqueID\":0,\"fBits\":521,\"fName\":\"Graph_copy\",\"fTitle\":\"\",\"fLineColor\":602,\"fLineStyle\":1,\"fLineWidth\":1,\"fFillColor\":0,\"fFillStyle\":1001,\"fMarkerColor\":1,\"fMarkerStyle\":1,\"fMarkerSize\":1,\"fNcells\":102,\"fXaxis\":{\"_typename\":\"TAxis\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"xaxis\",\"fTitle\":\"Date\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.04,\"fTickLength\":0.03,\"fTitleOffset\":0.85,\"fTitleSize\":0.05,\"fTitleColor\":1,\"fTitleFont\":42,\"fNbins\":100,\"fXmin\":1711922400,\"fXmax\":1725141599,\"fXbins\":[],\"fFirst\":0,\"fLast\":0,\"fBits2\":0,\"fTimeDisplay\":true,\"fTimeFormat\":\"%d-%b%F1970-01-01 00:00:00s0 GMT\",\"fLabels\":null,\"fModLabs\":null},\"fYaxis\":{\"_typename\":\"TAxis\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"yaxis\",\"fTitle\":\"Peak average efficiency\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.045,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.05,\"fTitleColor\":1,\"fTitleFont\":42,\"fNbins\":1,\"fXmin\":0.0607748052887944,\"fXmax\":0.972116164066233,\"fXbins\":[],\"fFirst\":0,\"fLast\":0,\"fBits2\":0,\"fTimeDisplay\":false,\"fTimeFormat\":\"\",\"fLabels\":null,\"fModLabs\":null},\"fZaxis\":{\"_typename\":\"TAxis\",\"fUniqueID\":0,\"fBits\":0,\"fName\":\"zaxis\",\"fTitle\":\"\",\"fNdivisions\":510,\"fAxisColor\":1,\"fLabelColor\":1,\"fLabelFont\":42,\"fLabelOffset\":0.005,\"fLabelSize\":0.035,\"fTickLength\":0.03,\"fTitleOffset\":1,\"fTitleSize\":0.035,\"fTitleColor\":1,\"fTitleFont\":42,\"fNbins\":1,\"fXmin\":0,\"fXmax\":1,\"fXbins\":[],\"fFirst\":0,\"fLast\":0,\"fBits2\":0,\"fTimeDisplay\":false,\"fTimeFormat\":\"\",\"fLabels\":null,\"fModLabs\":null},\"fBarOffset\":0,\"fBarWidth\":1000,\"fEntries\":0,\"fTsumw\":0,\"fTsumw2\":0,\"fTsumwx\":0,\"fTsumwx2\":0,\"fMaximum\":1.1,\"fMinimum\":0,\"fNormFactor\":0,\"fContour\":[],\"fSumw2\":[],\"fOption\":\"\",\"fFunctions\":{\"_typename\":\"TList\",\"name\":\"TList\",\"arr\":[],\"opt\":[]},\"fBufferSize\":0,\"fBuffer\":[],\"fBinStatErrOpt\":0,\"fStatOverflows\":2,\"fArray\":{\"$arr\":\"Float32\",\"len\":102}}}],\"fScripts\":\"\",\"fHighlightConnect\":false,\"fFixedSize\":false});\n",
       "   Core.settings.HandleKeys = false;\n",
       "   Core.draw(\"root_plot_1760980778399\", obj, \"\");\n",
       "}\n",
       "\n",
       "function script_load_root_plot_1760980778399(src, on_error) {\n",
       "    let script = document.createElement('script');\n",
       "    script.src = src;\n",
       "    script.onload = function() { display_root_plot_1760980778399(JSROOT); };\n",
       "    script.onerror = function() { script.remove(); on_error(); };\n",
       "    document.head.appendChild(script);\n",
       "}\n",
       "\n",
       "if (typeof requirejs !== 'undefined') {\n",
       "\n",
       "    // We are in jupyter notebooks, use require.js which should be configured already\n",
       "    requirejs.config({\n",
       "       paths: { 'JSRootCore' : [ 'build/jsroot', 'https://root.cern/js/7.9.0/build/jsroot', 'https://jsroot.gsi.de/7.9.0/build/jsroot' ] }\n",
       "    })(['JSRootCore'],  function(Core) {\n",
       "       display_root_plot_1760980778399(Core);\n",
       "    });\n",
       "\n",
       "} else if (typeof JSROOT !== 'undefined') {\n",
       "\n",
       "   // JSROOT already loaded, just use it\n",
       "   display_root_plot_1760980778399(JSROOT);\n",
       "\n",
       "} else {\n",
       "\n",
       "    // We are in jupyterlab without require.js, directly loading jsroot\n",
       "    // Jupyterlab might be installed in a different base_url so we need to know it.\n",
       "    try {\n",
       "        var base_url = JSON.parse(document.getElementById('jupyter-config-data').innerHTML).baseUrl;\n",
       "    } catch(_) {\n",
       "        var base_url = '/';\n",
       "    }\n",
       "\n",
       "    // Try loading a local version of requirejs and fallback to cdn if not possible.\n",
       "    script_load_root_plot_1760980778399(base_url + 'static/build/jsroot.js', function(){\n",
       "        console.error('Fail to load JSROOT locally, please check your jupyter_notebook_config.py file');\n",
       "        script_load_root_plot_1760980778399('https://root.cern/js/7.9.0/build/jsroot.js', function(){\n",
       "            document.getElementById(\"root_plot_1760980778399\").innerHTML = \"Failed to load JSROOT\";\n",
       "        });\n",
       "    });\n",
       "}\n",
       "\n",
       "</script>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import ROOT\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# --- Converti date in timestamp ---\n",
    "dates = []\n",
    "for run in selected_runs:\n",
    "    try:\n",
    "        date = pps_2024_track_df.loc[\n",
    "            pps_2024_track_df['run_number'] == run, 'last_endtime'\n",
    "        ].iloc[0]\n",
    "        date_obj = pd.to_datetime(date)\n",
    "        dates.append(ROOT.TDatime(date_obj.year, date_obj.month, date_obj.day,\n",
    "                                  date_obj.hour, date_obj.minute, date_obj.second).Convert())\n",
    "    except IndexError:\n",
    "        print(f'Run {run} non trovata nel CSV, skipping...')\n",
    "        continue\n",
    "\n",
    "dates = np.array(dates)\n",
    "avgEfficiencies = np.array(avgEfficiencies)\n",
    "\n",
    "# --- Ordina per data ---\n",
    "sort_idx = np.argsort(dates)\n",
    "dates = dates[sort_idx]\n",
    "avgEfficiencies = avgEfficiencies[sort_idx]\n",
    "\n",
    "# --- Canvas ---\n",
    "c = ROOT.TCanvas('c', 'c', 1200, 600)\n",
    "\n",
    "# --- Grafico dati ---\n",
    "g = ROOT.TGraph(len(dates))\n",
    "for i in range(len(dates)):\n",
    "    g.SetPoint(i, dates[i], avgEfficiencies[i])\n",
    "\n",
    "g.SetMarkerStyle(20)\n",
    "g.SetMarkerColor(ROOT.kBlue)\n",
    "g.SetMarkerSize(0.8)\n",
    "g.SetLineColor(ROOT.kBlue)\n",
    "g.SetTitle(\";Date;Peak average efficiency\")\n",
    "g.GetYaxis().SetRangeUser(0, 1.1)\n",
    "\n",
    "# --- Formatta asse X ---\n",
    "g.GetXaxis().SetTimeDisplay(1)\n",
    "g.GetXaxis().SetTimeFormat(\"%d-%b\")  # formato date\n",
    "g.GetXaxis().SetTimeOffset(0, \"gmt\")\n",
    "g.GetXaxis().SetLabelSize(0.04)\n",
    "g.GetXaxis().SetTitleSize(0.05)\n",
    "g.GetXaxis().SetTitleOffset(0.85)\n",
    "g.GetYaxis().SetTitleSize(0.05)\n",
    "g.GetYaxis().SetLabelSize(0.045)\n",
    "g.GetYaxis().SetTitleOffset(1)\n",
    "\n",
    "# Limita range ad aprile-agosto\n",
    "xmin = ROOT.TDatime(2024, 4, 1, 0, 0, 0).Convert()\n",
    "xmax = ROOT.TDatime(2024, 8, 31, 23, 59, 59).Convert()\n",
    "g.GetXaxis().SetLimits(xmin, xmax)\n",
    "\n",
    "# --- Grid e stile ---\n",
    "c.SetGrid()\n",
    "ROOT.gStyle.SetGridStyle(2)\n",
    "ROOT.gStyle.SetGridColor(ROOT.kGray)\n",
    "ROOT.gStyle.SetTitleFontSize(0.06)\n",
    "\n",
    "# --- Disegna grafico ---\n",
    "g.Draw(\"AP\")  # importante disegnare prima il grafico\n",
    "\n",
    "# Range Y\n",
    "ymin, ymax = 0, 1.1\n",
    "\n",
    "# # 3 maggio\n",
    "# x1 = ROOT.TDatime(2024, 5, 3, 0, 0, 0).Convert()\n",
    "# l1 = ROOT.TLine(x1, ymin, x1, ymax)\n",
    "# l1.SetLineColor(ROOT.kGray+2)\n",
    "# l1.SetLineStyle(2)  # tratteggiata\n",
    "# l1.SetLineWidth(2)\n",
    "# l1.Draw(\"SAME\")\n",
    "\n",
    "# # 24 maggio\n",
    "# x2 = ROOT.TDatime(2024, 5, 24, 0, 0, 0).Convert()\n",
    "# l2 = ROOT.TLine(x2, ymin, x2, ymax)\n",
    "# l2.SetLineColor(ROOT.kGray+2)\n",
    "# l2.SetLineStyle(2)  # tratteggiata\n",
    "# l2.SetLineWidth(2)\n",
    "# l2.Draw(\"SAME\")\n",
    "\n",
    "\n",
    "# # 24 july solo per la 45\n",
    "# x2 = ROOT.TDatime(2024, 7, 24, 0, 0, 0).Convert()\n",
    "# l2 = ROOT.TLine(x2, ymin, x2, ymax)\n",
    "# l2.SetLineColor(ROOT.kGray+2)\n",
    "# l2.SetLineStyle(2)  # tratteggiata\n",
    "# l2.SetLineWidth(2)\n",
    "# l2.Draw(\"SAME\")\n",
    "\n",
    "\n",
    "# --- Testo CMS / station / year ---\n",
    "plotPubStatus = 'Preliminary'\n",
    "cmsText = '#font[61]{CMS} #scale[0.76]{#font[52]{'+plotPubStatus+'}}'\n",
    "stationTag = '#scale[1]{{#font[42]{{{sector}-{station}-fr}}}}'.format(sector=sector,station=st_m)\n",
    "year_energy_tag = '#scale[0.76]{#font[42]{2024 (13.6 TeV)}}'\n",
    "\n",
    "latex.SetTextAlign(31)\n",
    "latex.DrawLatexNDC(0.88, 0.85, cmsText)\n",
    "latex.DrawLatexNDC(0.88, 0.13, stationTag)\n",
    "latex.DrawLatexNDC(0.89, 0.91, year_energy_tag)\n",
    "\n",
    "c.Draw()\n",
    "c.RedrawAxis()\n",
    "c.SaveAs(f'plots/Eff_vs_date_{sector}_{station}.png')\n",
    "\n",
    "\n",
    "\n",
    "print(f\"[Data in] sector: {sector} — station: {station}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47d40828",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93a48051",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
